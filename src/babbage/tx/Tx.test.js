import { describe, it, test } from "node:test"
import { deepEqual, strict, strictEqual, throws } from "node:assert"
import { Value } from "../money/index.js"
import { NetworkParamsHelper } from "../params/index.js"
import { Address } from "./Address.js"
import { Tx } from "./Tx.js"
import { TxOutput } from "./TxOutput.js"
import { bytesToHex, hexToBytes } from "@helios-lang/codec-utils"

describe(`basic ${Tx.name}`, () => {
    /**
     * send 10 tAda on preview net from wallet1 to wallet 2
     * (input is 10000 tAda, change is 9990 tAda minus fees)
     * wallet1 address: addr_test1vzzcg26lxj3twnnx889lrn60pqn0z3km2yahhsz0fvpyxdcj5qp8w
     * wallet2 address: addr_test1vqzhgmkqsyyzxthk7vzxet4283wx8wwygu9nq0v94mdldxs0d56ku
     * input utxo: d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83#0
     * command: cardano-cli transaction build --tx-in d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83#0 --tx-out addr_test1vqzhgmkqsyyzxthk7vzxet4283wx8wwygu9nq0v94mdldxs0d56ku+10000000 --change-address addr_test1vzzcg26lxj3twnnx889lrn60pqn0z3km2yahhsz0fvpyxdcj5qp8w --testnet-magic 2 --out-file /data/preview/transactions/202209042119.tx --babbage-era --cddl-format
     */
    const unsignedHex =
        "84a30081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b000000025370c627a200581d6005746ec08108232ef6f3046caeaa3c5c63b9c4470b303d85aedbf69a011a00989680021a00028759a0f5f6"
    const signedHex =
        "84a30081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b000000025370c627a200581d6005746ec08108232ef6f3046caeaa3c5c63b9c4470b303d85aedbf69a011a00989680021a00028759a10081825820a0e006bbd52e9db2dcd904e90c335212d2968fcae92ee9dd01204543c314359b584073afc3d75355883cd9a83140ed6480354578148f861f905d65a75b773d004eca5869f7f2a580c6d9cc7d54da3b307aa6cb1b8d4eb57603e37eff83ca56ec620cf5f6"

    const unsigned = Tx.fromCbor(unsignedHex)
    const signed = Tx.fromCbor(signedHex)

    const params = NetworkParamsHelper.default()

    it("unsigned tx contains a single input", () => {
        strictEqual(unsigned.body.inputs.length, 1)
    })

    it("unsigned tx validateSignatures fails", () => {
        throws(() => unsigned.validateSignatures())
    })

    it("signed tx validateSignatures fails (not yet recovered)", () => {
        throws(() => signed.validateSignatures())
    })

    it("unsigned fails regular validations (not yet recovered)", () => {
        throws(() => unsigned.validate(params))
    })

    it("signed fails regular validations (not yet recovered)", () => {
        throws(() => signed.validate(params))
    })

    it("minted value is zero", () => {
        strictEqual(unsigned.body.minted.isZero(), true)
    })

    it("unsigned.toCbor() should give exactly the same as original encoding", () => {
        strictEqual(bytesToHex(unsigned.toCbor()), unsignedHex)
    })

    it("signed.toCbor() should give exactly the same as original encoding", () => {
        strictEqual(bytesToHex(signed.toCbor()), signedHex)
    })

    it("signed size should be equal to original encoding size", () => {
        strictEqual(signed.calcSize(), hexToBytes(signedHex).length)
    })

    it("fee is larger or equal to min calculated fee", () => {
        const calculatedFee = signed.calcMinFee(params)
        strictEqual(signed.body.fee >= calculatedFee, true)
    })

    it("signed tx id is equal to unsigned tx id", () => {
        deepEqual(signed.id().bytes, unsigned.id().bytes)
    })

    it("recovered signed doesn't fail regular validations", async () => {
        await signed.recover(
            async () =>
                new TxOutput(
                    Address.new(
                        "addr_test1vzzcg26lxj3twnnx889lrn60pqn0z3km2yahhsz0fvpyxdcj5qp8w"
                    ),
                    new Value(10_000_000_000n)
                )
        )
        signed.validate(params)
    })
})

/**
 * The Txs in the following testVector were generated using the cardano-cli
 * This testvector can be used to check round-trip encoding
 * @type {{txHex: string, dummySignatures: number}[]}
 */
const testVector = [
    {
        txHex: "84a60081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000d81825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b0000000253eaa6cca200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b02433701821a001e8480a1581c0b61cc751e9512fef62362f00e6db61e70d719a567c6d4eb68095957a14001021a0002b8b409a1581c0b61cc751e9512fef62362f00e6db61e70d719a567c6d4eb68095957a140010b5820af267b4418b11a9faa827f80301849ec4bd4565dbd95bae23f73918444eab395a206815453010000322233335734600693124c4c931251010581840100182a821909611a00094d78f5f6",
        dummySignatures: 2
    },
    {
        txHex: "84a60081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000d81825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b0000000253eaa985a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b02433701821a001e8480a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea14001021a0002b5fb09a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea140010b5820686829109fc5e6342d9223537b91f804107c4dbfa8ba3288f80657be843acd51a2068147460100002249810581840100182a821903201a0002754cf5f6",
        dummySignatures: 2
    },
    {
        txHex: "84a60081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000d81825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b0000000253eaa6cca200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b02433701821a001e8480a1581c0b61cc751e9512fef62362f00e6db61e70d719a567c6d4eb68095957a14001021a0002b8b409a1581c0b61cc751e9512fef62362f00e6db61e70d719a567c6d4eb68095957a140010b5820af267b4418b11a9faa827f80301849ec4bd4565dbd95bae23f73918444eab395a30081825820a0e006bbd52e9db2dcd904e90c335212d2968fcae92ee9dd01204543c314359b5840684649bbe18d47cc58963877e777da9c7dab6206b4833c676f6301d974418b574f0d169723d7cedbd33e2cbcc07fac4a8cf32769816f8dc3153f5bdf6e510c0406815453010000322233335734600693124c4c931251010581840100182a821909611a00094d78f5f6",
        dummySignatures: 2
    },
    {
        txHex: "84a60081825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000d81825820d4b22d33611fb2b3764080cb349b3f12d353aef1d4319ee33e44594bbebe5e83000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b0000000253eaa985a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b02433701821a001e8480a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea14001021a0002b5fb09a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea140010b5820686829109fc5e6342d9223537b91f804107c4dbfa8ba3288f80657be843acd51a30081825820a0e006bbd52e9db2dcd904e90c335212d2968fcae92ee9dd01204543c314359b58409b4267e7691d160414f774f82942f08bbc3c64a19259a09b92350fe11ced5f73b64d99aa05f70cb68c730dc0d6ae718f739e5c2932eb843f2a9dcd69ff3c160c068147460100002249810581840100182a821903201a0002754cf5f6",
        dummySignatures: 2
    },
    {
        txHex: "84a400818258205d4bc6456f3bc6ac9f0c36ac25b0a4a9c2d793aaa5344355fcd2c8f647f2b55c000d818258205d4bc6456f3bc6ac9f0c36ac25b0a4a9c2d793aaa5344355fcd2c8f647f2b55c000182a200581d6085842b5f34a2b74e6639cbf1cf4f0826f146db513b7bc04f4b024337011b0000000253c6daafa300581d7052c6af0c9b744b4eecce838538a52ceb155038b3de68e2bb2fa8fc37011a001e8480028201d81842182a021a0002a09da0f5f6",
        dummySignatures: 2
    },
    {
        txHex: "84a60082825820088ce1fbcfb1a3221ea274921759bf7adb30beec750cc3ae50657b70d5138a8d00825820e2b4ec8b1ffa64082238c8a8963fd2b56e5e7256d4ce45f0e21f33c696d44da8010d81825820e2b4ec8b1ffa64082238c8a8963fd2b56e5e7256d4ce45f0e21f33c696d44da8010182a200583900d0d62ed8c1582b2459bafdcd6fe4eabd4b5d836478e81fb05168112e6403bccce5e41e05f3b8dc3d23d71deeb2077a6bf7e62c5c274b58ed011b0000000253fbe141a200583900d0d62ed8c1582b2459bafdcd6fe4eabd4b5d836478e81fb05168112e6403bccce5e41e05f3b8dc3d23d71deeb2077a6bf7e62c5c274b58ed01821a00153e02a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea14001021a000395110e81581cc1585421b224463e11264c1411e9e3346a3d6fa99b2ffc449aa267dc0b58203c3888dfdaa574e916814ae22c3e8abb75885a4a3e32c6c423bf0b9a9635c7a4a2068159043159042e01000032323232323232323232323232323222233335734646666ae68cc034004c02c01092891980691919999ab9a3370e6aae74dd5000a40044494488cc048018c0400052600130070062332232330010013300f00300222333357346ae8c0049289191999ab9a3011332232330010013301500300222333357346ae8c0049289191999ab9a30173017337106602c00c0026602c00a00249408cc014014d5d100224c6ae84009263300f0060013300f00500124a046600a00a6ae880112635742004931bab323333001001323330010013758601200a4660224646666ae68cdc39aab9d37540029000119baf301300c30133333573466e1cd55ce9baa00248000800c992624a09318089808801119baf323333573466e1cd55ce800a400446ae84d55cf00112601014000498dd518058011aab9d3233300100137566ae84d5d11aba2301500823375e6aae78004d5d0980b8061111999ab9a357460044c46666ae68c008d5d080191aba10042333005005357440080069324c4446666ae68d5d1801125eb808cccd5cd18011aba100323357406ae84010ccc014014d5d100200191998028029aba20040034992622332232374c6660020026602400600497adef6c60222333357346ae8c00880088cc88c8cccd5cd1aba30012003233574066ec0010dd3001001a4c6644646660020026603400600497adef6c60222333357346ae8c00880088cc88c8cccd5cd19b8700148000800c8cd5d019bb000437500040069319b803301d0080023301d007002357420066660080086ae8800c009263301400800233014007002357420066660080086ae8800c0092637560046eacc02c00530101a0002222333357346ae8c00c80088cccc014014d5d1002001998018011aba1004498dd5980400324c60140024931324c46ae84c0300048d5d09806000911919800800801911999ab9a35746002497adef6c6023333573466ebcd55ce9aba1002004237566aae78d5d08019198020021aba2003499262232333001001003002222333357346ae8c0089200023333573466ebcd55ce9aba10030022375a6aae78d5d080211998028029aba2004003499262333573400294128911919191998008009998010010018020019111999ab9a357460024006466ae80d5d08011998020020019aba2002498888cccd5cd1aba300124bd701191999ab9a3301100623375e002004466600c00c00a6ae880108cd5d00011998030030029aba2004498d55ce9aba1002498c8cc00400400c88cccd5cd1aba300124bd70119aba035573a6ae84008cc00c00cd5d100124c46ae84c02000488cccd5cd180124c4600493125049888cc020dd61aba1300300223375e00200446ae88d5d11aba2357446ae88c0080048d5d1180100091aba23002001235744600400246aae78dd500091191998008008018011111999ab9a3574600449408cccd5cd18011aba100324a2466600a00a6ae8801000d264990581840000182a821956e51a0070986af5f6",
        dummySignatures: 3
    }
]

describe("Tx.calcSize()", () => {
    const params = NetworkParamsHelper.default()

    testVector.forEach((t, i) => {
        const tx = Tx.fromCbor(t.txHex)
        tx.witnesses.addDummySignatures(t.dummySignatures)

        it(`test tx ${i + 1}`, () => {
            strictEqual(tx.calcMinFee(params), tx.body.fee)
        })
    })
})
